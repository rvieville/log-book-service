// Code generated by MockGen. DO NOT EDIT.
// Source: media.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "diving-log-book-service/internal/models"
	types "diving-log-book-service/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMediaInterface is a mock of MediaInterface interface.
type MockMediaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMediaInterfaceMockRecorder
}

// MockMediaInterfaceMockRecorder is the mock recorder for MockMediaInterface.
type MockMediaInterfaceMockRecorder struct {
	mock *MockMediaInterface
}

// NewMockMediaInterface creates a new mock instance.
func NewMockMediaInterface(ctrl *gomock.Controller) *MockMediaInterface {
	mock := &MockMediaInterface{ctrl: ctrl}
	mock.recorder = &MockMediaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaInterface) EXPECT() *MockMediaInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMediaInterface) Create(arg0 *types.CreateMediaPayload) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMediaInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMediaInterface)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockMediaInterface) Delete(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMediaInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaInterface)(nil).Delete), arg0)
}

// ReadOne mocks base method.
func (m *MockMediaInterface) ReadOne(arg0 uint) (*models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", arg0)
	ret0, _ := ret[0].(*models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockMediaInterfaceMockRecorder) ReadOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockMediaInterface)(nil).ReadOne), arg0)
}
