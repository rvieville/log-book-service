// Code generated by MockGen. DO NOT EDIT.
// Source: dive.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "diving-log-book-service/internal/models"
	types "diving-log-book-service/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDiveInterface is a mock of DiveInterface interface.
type MockDiveInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDiveInterfaceMockRecorder
}

// MockDiveInterfaceMockRecorder is the mock recorder for MockDiveInterface.
type MockDiveInterfaceMockRecorder struct {
	mock *MockDiveInterface
}

// NewMockDiveInterface creates a new mock instance.
func NewMockDiveInterface(ctrl *gomock.Controller) *MockDiveInterface {
	mock := &MockDiveInterface{ctrl: ctrl}
	mock.recorder = &MockDiveInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiveInterface) EXPECT() *MockDiveInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDiveInterface) Create(arg0 *types.CreateDivePayload) (*models.Dive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Dive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDiveInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDiveInterface)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDiveInterface) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDiveInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiveInterface)(nil).Delete), id)
}

// ReadAll mocks base method.
func (m *MockDiveInterface) ReadAll() ([]models.Dive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]models.Dive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDiveInterfaceMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDiveInterface)(nil).ReadAll))
}

// ReadOne mocks base method.
func (m *MockDiveInterface) ReadOne(id uint) (*models.Dive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", id)
	ret0, _ := ret[0].(*models.Dive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockDiveInterfaceMockRecorder) ReadOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockDiveInterface)(nil).ReadOne), id)
}
