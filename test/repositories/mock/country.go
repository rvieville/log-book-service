// Code generated by MockGen. DO NOT EDIT.
// Source: country.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "diving-log-book-service/internal/models"
	gormHelper "diving-log-book-service/internal/pkg/gorm"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCountryInterface is a mock of CountryInterface interface.
type MockCountryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCountryInterfaceMockRecorder
}

// MockCountryInterfaceMockRecorder is the mock recorder for MockCountryInterface.
type MockCountryInterfaceMockRecorder struct {
	mock *MockCountryInterface
}

// NewMockCountryInterface creates a new mock instance.
func NewMockCountryInterface(ctrl *gomock.Controller) *MockCountryInterface {
	mock := &MockCountryInterface{ctrl: ctrl}
	mock.recorder = &MockCountryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryInterface) EXPECT() *MockCountryInterfaceMockRecorder {
	return m.recorder
}

// ReadAll mocks base method.
func (m *MockCountryInterface) ReadAll(filters []gormHelper.Filter) ([]models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", filters)
	ret0, _ := ret[0].([]models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockCountryInterfaceMockRecorder) ReadAll(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockCountryInterface)(nil).ReadAll), filters)
}
