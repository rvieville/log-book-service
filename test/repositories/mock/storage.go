// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	types "diving-log-book-service/internal/types"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// AbortMultipart mocks base method.
func (m *MockStorageInterface) AbortMultipart(payload *types.AbortMultipartPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipart", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortMultipart indicates an expected call of AbortMultipart.
func (mr *MockStorageInterfaceMockRecorder) AbortMultipart(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipart", reflect.TypeOf((*MockStorageInterface)(nil).AbortMultipart), payload)
}

// CompleteMultipart mocks base method.
func (m *MockStorageInterface) CompleteMultipart(payload *types.CompleteMultipartPayload) (*s3.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipart", payload)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipart indicates an expected call of CompleteMultipart.
func (mr *MockStorageInterfaceMockRecorder) CompleteMultipart(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipart", reflect.TypeOf((*MockStorageInterface)(nil).CompleteMultipart), payload)
}

// Delete mocks base method.
func (m *MockStorageInterface) Delete(arg0 *types.DeleteObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageInterface)(nil).Delete), arg0)
}

// GetUrl mocks base method.
func (m *MockStorageInterface) GetUrl(arg0 *types.GetUrl) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockStorageInterfaceMockRecorder) GetUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockStorageInterface)(nil).GetUrl), arg0)
}

// InitMultipart mocks base method.
func (m *MockStorageInterface) InitMultipart(multipart *types.InitMultipartPayload) (*s3.CreateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMultipart", multipart)
	ret0, _ := ret[0].(*s3.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitMultipart indicates an expected call of InitMultipart.
func (mr *MockStorageInterfaceMockRecorder) InitMultipart(multipart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMultipart", reflect.TypeOf((*MockStorageInterface)(nil).InitMultipart), multipart)
}

// Upload mocks base method.
func (m *MockStorageInterface) Upload(arg0 *types.UploadPayload) (*types.UploadedFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(*types.UploadedFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockStorageInterfaceMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageInterface)(nil).Upload), arg0)
}

// UploadPart mocks base method.
func (m *MockStorageInterface) UploadPart(input *types.UploadPartPayload) (*s3.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPart", input)
	ret0, _ := ret[0].(*s3.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockStorageInterfaceMockRecorder) UploadPart(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockStorageInterface)(nil).UploadPart), input)
}
